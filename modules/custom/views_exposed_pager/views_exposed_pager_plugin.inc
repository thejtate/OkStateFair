<?php
/**
 * The plugin to handle full pager.
 *
 * @ingroup views_pager_plugins
 */
class views_exposed_pager_plugin extends views_plugin_pager_full {

  const COOKIE_ROW_DELIMETER = ':';
  const COOKIE_KEY_VALUE_DELIMETER = '/';

  function option_definition() {
    $options = parent::option_definition();
    //expose pager by default
    $options['expose']['contains']['items_per_page'] = array('default' => TRUE, 'bool' => TRUE);
    return $options;
  }

  function options_form(&$form, &$form_state) {
    parent::options_form($form, $form_state); // TODO: Change the autogenerated stub
    if(isset($this->display->display_plugin) && $this->display->display_plugin == 'block') {
      $form['warning'] = array(
        '#weight' => -10,
        '#markup' => '<div class="messages warning">' . t('Exposed pagers in block displays require "Use AJAX" to be set to work correctly.') . '</div>',
      );
    }
  }


  function exposed_form_alter(&$form, &$form_state) {
    parent::exposed_form_alter($form, $form_state);
    if(empty($this->options['expose']['items_per_page'])) {
      //pager not exposed
      return;
    }
    if(isset($_COOKIE['views_exposed_pager']) && !isset($form_state['input']['items_per_page'])) {
      $views_saved_pager_limits = $this->decode_cookie($_COOKIE['views_exposed_pager']);
      //if exist stored pager limits in cookie, and value is valid, set pager limit from cookie
      if(isset($views_saved_pager_limits[$this->view->vid])
        && isset($form['items_per_page']['#options'][$views_saved_pager_limits[$this->view->vid]])) {

        $form_state['input']['items_per_page'] = $views_saved_pager_limits[$this->view->vid];
        $form['items_per_page']['#default_value'] = $views_saved_pager_limits[$this->view->vid];
        $form_state['input']['items_per_page_from_cookie'] = TRUE;
        $this->view->items_per_page = $views_saved_pager_limits[$this->view->vid];
      }

    }
    $form['items_per_page']['#type'] = 'hidden'; //hide ipp from exposed form since we show it in the pager

    $form['submit']['#attributes']['class'][] = 'exposed-form-submit-button';

    $form['#attributes']['data-form-class'][] = $this->get_exposed_form_class();//add views unique class

    //if there are no other exposed form inputs, hide the buttons
    $button_keys = array('reset', 'submit');
    $show_buttons = FALSE;
    foreach ($form as $key => $item) {
      if (!in_array($key, $button_keys) && is_array($item)  && array_key_exists('#type', $item) && $item['#type'] != 'hidden') {
        $show_buttons = TRUE;
        break;
      }
    }
    if (!$show_buttons) {
      foreach ($button_keys as $key) {
        $form[$key]['#attributes']['class'][] = 'element-hidden';
      }
    }
    $form['#attached']['js'][] = drupal_get_path('module', 'views_exposed_pager') . '/js/views_exposed_pager.js';
  }

  function render($input) {
    $pager = parent::render($input);

    if(empty($this->options['expose']['items_per_page'])) {
      //pager not exposed
      return $pager;
    }

    $options = explode(',', $this->options['expose']['items_per_page_options']);
    $sanitized_options = array();

    if (is_array($options)) {
      foreach ($options as $option) {
        $sanitized_options[intval($option)] = intval($option);
      }
    }
    $select = array(
      '#title' => $this->options['expose']['items_per_page_label'],
      '#name' => 'items_per_page',
      '#options' => $sanitized_options,
      '#value' => isset($input['items_per_page']) ? $input['items_per_page'] : $this->options['items_per_page'],
      '#attributes' => array(
        'class' => array('views-exposed-pager'),
        'data-form-class' => $this->get_exposed_form_class(),
      )
    );

    $output = theme(
      'views_exposed_pager',
      array(
        'pager' => $pager,
        'exposed_pager_filter' => $this->total_items > 0 ? theme('select', array('element' => $select)) : '',
      )
    );

    return $output;
  }

  /**
   * Provide css class name for current views, based on views name and current display
   */
  function get_exposed_form_class() {
    return 'exposed-form-' . $this->view->name . '-' . $this->view->current_display;
  }

  function exposed_form_submit(&$form, &$form_state, &$exclude) {
    if(isset($form_state['input']['items_per_page']) && empty($form_state['input']['items_per_page_from_cookie'])) {
      $views_pager_limits =  $this->get_views_pager_limits_from_cookie();
      $views_pager_limits[$this->view->vid] = $form_state['input']['items_per_page'];

      $value = $this->encode_cookie($views_pager_limits);
      setrawcookie('views_exposed_pager', $value, time()+60*60*24*365, self::COOKIE_KEY_VALUE_DELIMETER);
    }
    parent::exposed_form_submit($form, $form_state, $exclude);
  }

  /**
   * Convert array with integer key and values to cookie string
   * @param $array
   * @return string
   */
  function encode_cookie($array) {
    $output = '';
    foreach($array as $key => $value) {
      $output = !empty($output) ? $output . self::COOKIE_ROW_DELIMETER : '';
      $output .= $key .  self::COOKIE_KEY_VALUE_DELIMETER . $value;
    }
    return $output;
  }

  /**
   * Decode cookie string to settings array
   * @param $string
   * @return array
   */
  function decode_cookie($string) {
    $output = array();
    $rows = explode(self::COOKIE_ROW_DELIMETER, $string);
    foreach ($rows as $row) {
      $key_value = explode(self::COOKIE_KEY_VALUE_DELIMETER, $row);
      if(isset($key_value[0]) && is_numeric($key_value[0]) && isset($key_value[1]) && is_numeric($key_value[1])) {
        $output[(int) $key_value[0]] = (int) $key_value[1];
      }
    }
    return $output;
  }

  function get_views_pager_limits_from_cookie() {
    $output = array();
    if(isset($_COOKIE['views_exposed_pager'])) {
      $output = $this->decode_cookie($_COOKIE['views_exposed_pager']);
    }
    return $output;
  }

}