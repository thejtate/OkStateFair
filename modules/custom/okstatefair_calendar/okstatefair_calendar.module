<?php

/**
 * @file
 * Okstate calendar functionality.
 */

define('CALENDAR_DATE_FILTER_FORMAT', 'Y-m-d');
define('CALENDAR_SHARED_EVENTS_DATE_FORMAT', 'm/d/Y');
define('CALENDAR_SHARED_EVENTS_TIME_FORMAT', 'g:ia');//6:34am
define('AGENDA_DATE_FORMAT', 'D. M. j');//Mon. Jun. 10th
define('AGENDA_DATE_FORMAT_ONE', 'D.');//Mon. Jun. 10th
define('AGENDA_DATE_FORMAT_TWO', 'j');//Mon. Jun. 10th
define('AGENDA_TIME_FORMAT', 'g:ia');//6:34am
define('CALENDAR_CATEGORY_VID', 3);
define('CALENDAR_DATES_VID', 4);
define('CALENDAR_EVENT_LOCATION_VID', 2);
define('CALENDAR_CATEGORY_ARGUMENT_POSITION', 1);
define('CALENDAR_DATE_ARGUMENT_POSITION', 0);
define('MOBILE_CALENDAR_CATEGORY_ARGUMENT_POSITION', 1);
define('MOBILE_CALENDAR_DATE_ARGUMENT_POSITION', 0);

/***************************************************
 *  Hooks implementations
 ***************************************************/
        
/**
 * Implements hook_menu().
 */
function okstatefair_calendar_menu() {
  $items = array();

  $items['agenda'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'okstatefair_calendar_agenda_json_callback',
    'access callback' => TRUE,
  );

  $items['agenda/share/url'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'okstatefair_calendar_agenda_share_url_json_callback',
    'access callback' => TRUE,
  );
  $items['state-fair-calendar-ajax-print'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'okstatefair_calendar_get_ajax_print_version',
    'access callback' => TRUE,
  );

  $items['events/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'okstatefair_calendar_agenda_shared_events',
    'access callback' => TRUE,
    'page arguments' => array(1),
  );

  $items['calendar/denormalized/rebuild'] = array(
    'title' => 'Rebuild calendar table',
    'description' => 'Rebuild calendar denormalized table',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('okstatefair_calendar_batch_rebuild_form'),
    'access arguments' => array('rebuild calendar denormalized table'),
    'file' => 'okstatefair_calendar.helper.inc',
    'file path' => drupal_get_path('module', 'okstatefair_calendar') . '/includes',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function okstatefair_calendar_permission() {
  return array(
    'display full event dates edit form' => array(
      'title' => t('Don`t hide "state_fair_event_dates" taxonomy edit form elements.'),
      'description' => t('Access to full taxonomy edit form (without hidden from elements)'),
    ),
    'okstate view sf calendar' => array(
      'title' => t('Allow to view State Fair calendar, mobile and desktop.'),
      'description' => t('View calendar, otherwise show coming soon message.'),
    ),
    'rebuild calendar denormalized table' => array(
      'title' => t('Access to rebuilding calendar denormalized table.'),
      'description' => t('Access to rebuilding calendar denormalized table.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function okstatefair_calendar_theme() {
  $module_path = drupal_get_path('module', 'okstatefair_calendar');
  $base = array(
    'path' => "$module_path/theme",
  );
  return array(
    'okstatefair_calendar_sort_by' => $base + array(
      'template' => 'okstatefair_calendar_sort_by',
      'variables' => array('category_terms' => array(), 'args' => array()),
    ),
    'okstatefair_calendar_dates' => $base + array(
      'template' => 'okstatefair_calendar_dates',
      'variables' => array('data' => array(), 'cl' => ''),
    ),
    'okstatefair_calendar_my_agenda' => $base + array(
      'template' => 'okstatefair_calendar_my_agenda',
      'variables' => array(),
    ),
    'okstatefair_calendar_shared_events' => $base + array(
      'template' => 'okstatefair_calendar_shared_events',
      'variables' => array('table' => '', 'pager' => '', 'empty_message' => ''),
    ),
    //Calendar print theme functions
    'okstatefair_calendar_print_header' => $base + array(
      'template' => 'okstatefair_calendar_print_header',
      'variables' => array('data' => array()),
    ),
    //Mobile themes functions
    'okstatefair_calendar_mobile_dates' => $base + array(
      'template' => 'okstatefair_calendar_mobile_dates',
      'variables' => array('data' => array()),
    ),
    'okstatefair_calendar_mobile_categories' => $base + array(
      'template' => 'okstatefair_calendar_mobile_categories',
      'variables' => array('data' => array()),
    ),
    'okstatefair_calendar_mobile_date_link' => $base + array(
      'variables' => array('current_date' => '', 'active_date' => '', 'category' => ''),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function okstatefair_calendar_block_info() {
  $blocks = array();
  $blocks['my_agenda'] = array(
    'info' => t('Calendar: My agenda'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function okstatefair_calendar_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'my_agenda':
      $block['subject'] = '';
      $block['content'] = theme('okstatefair_calendar_my_agenda');
      break;
  }
  return $block;
}


/**
 * Implements hook_field_collection_item_insert().
 *
 * @param FieldCollectionItemEntity $field_collection_item
 */
function okstatefair_calendar_field_collection_item_insert(FieldCollectionItemEntity $field_collection_item) {
  if($field_collection_item->field_name == 'field_sf_event_dates') {
    okstatefari_calendar_event_add($field_collection_item);
  }
}

/**
 * Implements hook_field_collection_item_delete().
 *
 * @param FieldCollectionItemEntity $field_collection_item
 */
function  okstatefair_calendar_field_collection_item_delete(FieldCollectionItemEntity $field_collection_item) {
  if($field_collection_item->field_name == 'field_sf_event_dates') {
    okstatefair_calendar_event_delete($field_collection_item->item_id);
  }
}

/**
 * Implements hook_field_collection_item_update().
 *
 * @param FieldCollectionItemEntity $field_collection_item
 */
function  okstatefair_calendar_field_collection_item_update(FieldCollectionItemEntity $field_collection_item) {
  if($field_collection_item->field_name == 'field_sf_event_dates') {
    $original_date_time = !empty($field_collection_item->original->field_sf_event_dates_date[LANGUAGE_NONE][0]['value'])
      ? $field_collection_item->original->field_sf_event_dates_date[LANGUAGE_NONE][0]['value'] : '';
    $new_date_time = !empty($field_collection_item->field_sf_event_dates_date[LANGUAGE_NONE][0]['value'])
      ? $field_collection_item->field_sf_event_dates_date[LANGUAGE_NONE][0]['value'] : '';

    if ($new_date_time != $original_date_time) {
      if (!empty($new_date_time)) {
        if(empty($original_date_time)) {
          //insert start_date_time if changed (time added)
          okstatefari_calendar_event_add($field_collection_item);
        } else {
          //update start_date_time if changed (time updated)
          $record = array(
            'id' => $field_collection_item->item_id,
            'start_date_time' => $new_date_time,
          );
          drupal_write_record('state_fair_calendar', $record, array('id'));
        }

      }
      else {
        okstatefair_calendar_event_delete($field_collection_item->item_id);
      }
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function  okstatefair_calendar_node_insert($node) {

  if (!empty($node->field_sf_event_dates[LANGUAGE_NONE])) {
    $location = '';
    $location_tid = 0;
    if(!empty($node->field_sf_event_location[LANGUAGE_NONE][0]['tid'])) {
      $location_tid = $node->field_sf_event_location[LANGUAGE_NONE][0]['tid'];
      $term = taxonomy_term_load($location_tid);
      $location = !empty($term->name) ? $term->name : '';
    }
    foreach ($node->field_sf_event_dates[LANGUAGE_NONE] as $collection_item) {
      $field_collection_item = field_collection_item_load($collection_item['value']);
      if (!empty($field_collection_item->field_sf_event_dates_date[LANGUAGE_NONE][0]['value'])) {
        $record = array(
          'id' => $field_collection_item->item_id,
          'nid' => $node->nid,
          'title' => $node->title,
          'start_date_time' => $field_collection_item->field_sf_event_dates_date[LANGUAGE_NONE][0]['value'],
          'location' => $location,
          'location_tid' => $location_tid,
        );
//       drupal_write_record('state_fair_calendar', $record);
        db_merge('state_fair_calendar')
          ->key(array('id' => $record['id']))
          ->fields($record)
          ->execute();
      }
    }
  }
}

/**
 * Implements hook_node_update().
 */
function okstatefair_calendar_node_update($node) {
  if ($node->type == 'state_fair_event') {
    $record = array();
    if ($node->original->title != $node->title) {
      //update event titles
      $record['title'] = $node->title;
    }

    $original_location_tid = !empty($node->original->field_sf_event_location[LANGUAGE_NONE][0]['tid']) ? $node->original->field_sf_event_location[LANGUAGE_NONE][0]['tid'] : 0;
    $new_location_tid = !empty($node->field_sf_event_location[LANGUAGE_NONE][0]['tid']) ? $node->field_sf_event_location[LANGUAGE_NONE][0]['tid'] : 0;
    if ($original_location_tid != $new_location_tid) {
      if ($new_location_tid != 0) {
        $term = taxonomy_term_load($new_location_tid);
        $new_location_name = $term->name;
      }
      else {
        $new_location_name = '';
      }
      //update location info
      $record['location'] = $new_location_name;
      $record['location_tid'] = $new_location_tid;
    }

    if (!empty($record)) {
      $record['nid'] = $node->nid;
      drupal_write_record('state_fair_calendar', $record, 'nid');
    }
  }
}

/**
 * Implements hook_taxonomy_term_update().
 */
function okstatefair_calendar_taxonomy_term_update($term) {
  if($term->vid == CALENDAR_EVENT_LOCATION_VID) {
    if($term->name != $term->original->name) {
      $record = array(
        'location' => $term->name,
        'location_tid' => $term->tid,
      );
      drupal_write_record('state_fair_calendar', $record, 'location_tid');
    }
  }
}

/**
 * Implements hook_taxonomy_term_delete().
 */
function okstatefair_calendar_taxonomy_term_delete($term) {

  if($term->vid == CALENDAR_EVENT_LOCATION_VID) {
    db_update('state_fair_calendar')
      ->fields(array(
        'location' => '',
        'location_tid' => 0,
      ))
      ->condition('location_tid', $term->tid)
      ->execute();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function okstatefair_calendar_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {
  $term = (array) $form['#term'];
  if ($term['vid'] == CALENDAR_DATES_VID && !user_access('display full event dates edit form')) {
    //hide some elements in "event dates" taxonomy term edit form for user, without permission to see full form
    $hide_elements = array(
      'name',
      'description',
      'field_sf_term_date',
      'relations',
      'metatags',
      'path'
    );
    foreach ($hide_elements as $element_name) {
      if (!empty($form[$element_name])) {
        $form[$element_name]['#access'] = FALSE;
      }
    }
  }
}


/**
 * Implements hook_views_api().
 */
function okstatefair_calendar_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_views_data().
 */
function okstatefair_calendar_views_data() {
  $data['state_fair_featured_multiple']['table']['group'] = t('Example table');

  $data['state_fair_featured_multiple']['table']['base'] = array(
    'field' => 'original_val',
    'title' => t('Featured multiplier'),
    'help' => t('Helper four multiplication featured rows.'),
    'weight' => -10,
  );

  // Node ID table field.
  $data['state_fair_featured_multiple']['original_val'] = array(
    'title' => t('Original value of featured field.'),
    'help' => t('Original value of featured field.'),
  );

  // Example numeric text field.
  $data['state_fair_featured_multiple']['val'] = array(
    'title' => t('Featured multiplier value'),
    'help' => t('Just a numeric field.'),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );

  return $data;
}

/**
 * Implements hook_view_data_alter().
 */
function okstatefair_calendar_views_data_alter(&$data) {
  $data['field_data_field_sf_event_featured']['dummy_name'] = array(
    'title' => t('Featured multiplier relationship'),
    'help' => t('Featured multiplier.'),
    'group' => t('Featured'),
    'relationship' => array(
      'base' => 'state_fair_featured_multiple', // Table we're joining to.
      'base field' => 'original_val', // Field on the joined table.
      'field' => 'field_sf_event_featured_value', // Real field name on the 'foo' table.
      'handler' => 'views_handler_relationship',
      'label' => t('Featured multiplier.'),
      'title' => t('Featured multiplier relationship'),
      'help' => t('Featured multiplier relationship.'),
    ),
  );

}


/***************************************************
 *  Preprocess functions
 ***************************************************/

/**
 * Implements hook_preprocess_page().
 */
function okstatefair_calendar_preprocess_page(&$vars) {
  $module_path = drupal_get_path('module', 'okstatefair_calendar');
  $print_css_include_link = '<link href="'. url($module_path . '/css/print-agenta.css', array('query' => array('ver' => '1'))) . '" rel="stylesheet" type="text/css">';
  drupal_add_library('system', 'jquery.cookie');
  drupal_add_library('system','ui.datepicker');
  drupal_add_js('http://connect.facebook.net/en_US/all.js?xfbml=0', array('external' => TRUE));
  drupal_add_js('http://platform.twitter.com/widgets.js', array('external' => TRUE));
  drupal_add_js($module_path . '/js/libs/jstorage.min.js');
  drupal_add_js($module_path . '/js/my_agenda.js');
  drupal_add_js(array('okstatefair_calendar' => array('logo_url' => url('icon-logo-new.png', array('absolute' => TRUE)))), 'setting');
  drupal_add_js(array('okstatefair_calendar' => array('print_logo_url' => url($module_path . '/images/logo_print_agenta.png', array('absolute' => TRUE)))), 'setting');
  drupal_add_js(array('okstatefair_calendar' => array('print_css_link' => $print_css_include_link)), 'setting');
  if(in_array('page__state_fair_calendar', $vars['theme_hook_suggestions'])) {
    drupal_add_js($module_path . '/js/okstatefair_calendar.js');
  }
}

/**
 * Implements hook_preprocess_node().
 */
function okstatefair_calendar_preprocess_node(&$vars) {

  if ($vars['type'] == 'state_fair_event') {
    $exclude_nodes = okstatefair_event_special_nodes();
    if (!in_array($vars['nid'], $exclude_nodes) && !_okstate_special_performer($vars['node'])) {

     $active_dates = okstatefair_calendar_get_event_node_dates($vars['node']->nid);
     $start = t('Sept. ');  
     $vars['content']['start'] = okstatefair_calendar_prepare_period($vars['node']->nid, $start, FALSE);
     $vars['content']['calendar_dates'] = array(
        '#theme' => 'okstatefair_calendar_dates',
        '#data' => okstatefair_calendar_get_calendar_dates_data($active_dates),
      );
    }
  }
}


/**
 * Theme preprocess function for theme_field() and field.tpl.php.
 */
function okstatefair_calendar_preprocess_field(&$vars, $hook) {
  switch ($vars['element']['#field_name']) {
    case 'field_sf_event_dates_date' :
      $vars['add_agenda_link'] = '';

      $host_node = $vars['element']['#object']->hostEntity();
      if(!empty($host_node)) {
        $date_field = field_info_field('field_sf_event_dates_date');
          $date_obj = new DateObject(
            $vars['element']['#object']->field_sf_event_dates_date[LANGUAGE_NONE][0]['value'],
            $date_field['settings']['timezone_db'],
            date_type_format($date_field['type']));
        $default_timezone = new DateTimeZone(date_default_timezone());
        $date_obj->setTimezone($default_timezone);
       // $month = custom_month(date('M', strtotime($vars['element']['#object']->field_sf_event_dates_date[LANGUAGE_NONE][0]['value'])));
        //$date_formatted = $date_obj->format(AGENDA_DATE_FORMAT_ONE) . ', ' . $month . $date_obj->format(AGENDA_DATE_FORMAT_TWO);
        $date_formatted = okstatefair_agenda_get_formated_date($date_obj);
        $time_formatted = $date_obj->format(AGENDA_TIME_FORMAT);
        $timestamp = $date_obj->format('U');
        $location = '';
        if(!empty($host_node->field_sf_event_location[LANGUAGE_NONE][0]['tid'])) {
          $location_tid = $host_node->field_sf_event_location[LANGUAGE_NONE][0]['tid'];
          $term = taxonomy_term_load($location_tid);
          $location = !empty($term->name) ? $term->name : '';
        }
        $vars['add_agenda_link'] = l(t('ADD TO AGENDA'), '#',
          array(
            'attributes' => array(
              'class' => array('btn', 'add-to-agenda', 'btn-add'),
              'data-id' => $vars['element']['#object']->item_id,
              'data-title' => $host_node->title,
              'data-url' => url('node/' . $host_node->nid, array('alias' => TRUE)),
              'data-date' => $date_formatted,
              'data-time' => $time_formatted,
              'data-timestamp' => $timestamp,
              'data-location' => $location,
            ),
            'external' => TRUE)
        );
      }
      break;
  }
}

/**
 * Provide not a standard date format.
 */
function okstatefair_agenda_get_formated_date($date_obj) {
  $month = custom_month($date_obj->format('M'));
  $date_formatted = $date_obj->format(AGENDA_DATE_FORMAT_ONE) . ' ' . $month . $date_obj->format(AGENDA_DATE_FORMAT_TWO);

  return $date_formatted;
}

function okstatefair_calendar_prepare_period($nid, $month, $show_day_suffix = TRUE) {
  $active_dates = okstatefair_calendar_get_event_node_dates($nid);
  $start = $month;
  $duration = count($active_dates);
  if ($duration > 1) {
    foreach ($active_dates as $k => $val) {
      $ar[] = date('d', strtotime($val));
    }
    asort($ar);
    $i = 0;
    $ar_temp = array_values($ar);
    $ar_temp = array_shift($ar_temp);
    $key = array_search($ar_temp, $ar);
    $ar_new = array_values($ar);
    $start .= $ar[$key];
    $start .= $show_day_suffix ? '<sup>' . date('S', strtotime($active_dates[$key])) . "</sup>" : '';
    $ar_new[$duration] = '';
    foreach ($ar_new as $k => $val) {
      if (($k + 1) <= $duration) {
        if (($ar_new[($k + 1)] == $val + 1)) {
          $i = $k + 1;
        }
        elseif ($i != 0) {
          $start .= ' - ';
          $key = array_search($ar_new[$k], $ar_new);
          $key2 = $k + 1 != $duration ? $sup = '' : $sup = '';
          if (!empty($ar_new[$k + 1])) {
            $new_one = ', ' . $ar_new[$k + 1];
          }
          else
            $new_one = '';
          $start .= $ar_new[$k];
          $start .= $show_day_suffix ? '<sup>' . date('S', strtotime($active_dates[$key])) . "</sup> " : '';
          $start .= $new_one . $sup;
//          $start .= $ar_new[$k] . $new_one ;
          $i = 0;
        }
        else {
//          $key2 = $k + 1 != $duration ? $sup = ''  : $sup = '';
          $key2 = $k + 1 != $duration ? $sup = '<sup>' . date('S', strtotime($active_dates[array_search($ar_new[$k + 1], $ar_new)])) . "</sup>" : $sup = '';
          if (!empty($ar_new[$k + 1])) {
            $new_one = ', ' . $ar_new[$k + 1];
          }
          else
            $new_one = '';
          $start .= $new_one;
        }
      }
    }
  }
  else {
    //    $start = $month . date('d', strtotime($active_dates[0])) ;
    $start = $month . date('d', strtotime($active_dates[0]));
    $start .= $show_day_suffix ? '<sup>' . date('S', strtotime($active_dates[0])) . "</sup>" : '';
  }

  return $start;
}

/**
 * Implements hook_preprocess_views_view().
 */
function okstatefair_calendar_preprocess_views_view(&$vars) {
  //desktop calendar views
  if ($vars['view']->name == 'state_fair_calendar' && $vars['view']->current_display == 'page') {
    $vars['no_calendar_access'] = !user_access('okstate view sf calendar');
    $print_link_path = 'state-fair-calendar-ajax-print';
    if(!empty($vars['view']->args)) {
      $print_link_path .= '/' . implode('/', $vars['view']->args);
    }
    $vars['print_link'] = $vars['print'] = l('', $print_link_path, array(
        'external' => TRUE,
        'attributes' => array(
          'class' => array('link-print'),
          'id' => 'sf-calendar-print-link',
          'data-print' => 'not-default',
        ),
      )
    );

    $terms = okstatefair_calendar_taxonomy_term_get_by_vid(CALENDAR_CATEGORY_VID);
    $category_args = !empty($vars['view']->args[CALENDAR_CATEGORY_ARGUMENT_POSITION])
      ? explode(',', $vars['view']->args[CALENDAR_CATEGORY_ARGUMENT_POSITION]) : array();
    $vars['sort_by'] = theme('okstatefair_calendar_sort_by', array('category_terms' => $terms, 'args' => $category_args));

    $active_dates =  !empty($vars['view']->args[CALENDAR_DATE_ARGUMENT_POSITION]) ? array($vars['view']->args[CALENDAR_DATE_ARGUMENT_POSITION]) : array();
    $data = okstatefair_calendar_get_calendar_dates_data($active_dates, TRUE);
    $cl = ' calendar-with-content';
    $vars['dates'] = theme('okstatefair_calendar_dates', array('data' => $data, 'cl' => $cl));
  //print calendar views
  } else if($vars['view']->name == 'state_fair_calendar' && $vars['view']->current_display == 'print_display')  {
    $date_arg = !empty($vars['view']->args[MOBILE_CALENDAR_DATE_ARGUMENT_POSITION])
      ? $vars['view']->args[MOBILE_CALENDAR_DATE_ARGUMENT_POSITION] : okstatefair_calendar_views_get_default_date();

    $cur_date_obj = date_create_from_format(CALENDAR_DATE_FILTER_FORMAT, $date_arg);
    $title_date = $cur_date_obj->format('l, F j');

    $categories = t('All');
    if(!empty($vars['view']->args[CALENDAR_CATEGORY_ARGUMENT_POSITION]) && $vars['view']->args[CALENDAR_CATEGORY_ARGUMENT_POSITION] != 'all') {
      $terms = taxonomy_term_load_multiple(explode(',', $vars['view']->args[CALENDAR_CATEGORY_ARGUMENT_POSITION]));
      $categories = '';
      $categories_titles = array();
      foreach ($terms as $term) {
        $categories_titles[] = $term->name;
      }
      $categories = implode(', ', $categories_titles);
    }

    $vars['header'] = theme('okstatefair_calendar_print_header', array('data' => array('date' => $title_date, 'categories' => $categories)));
  //mobile calendar views
  } else if($vars['view']->name == 'mobile_state_fair_calendar') {
    $vars['no_calendar_access'] = !user_access('okstate view sf calendar');
    $terms = okstatefair_calendar_taxonomy_term_get_by_vid(CALENDAR_CATEGORY_VID);
    $category_args = !empty($vars['view']->args[MOBILE_CALENDAR_CATEGORY_ARGUMENT_POSITION])
      ?$vars['view']->args[MOBILE_CALENDAR_CATEGORY_ARGUMENT_POSITION] : 'all';
    $date_arg = !empty($vars['view']->args[MOBILE_CALENDAR_DATE_ARGUMENT_POSITION])
      ? $vars['view']->args[MOBILE_CALENDAR_DATE_ARGUMENT_POSITION] : okstatefair_calendar_views_get_default_date();

    $cur_date_obj = date_create_from_format(CALENDAR_DATE_FILTER_FORMAT, $date_arg);
    $title_date = $cur_date_obj->format('l, F j');

    $vars['categories'] = theme('okstatefair_calendar_mobile_categories', array('data' => array('date' => $date_arg, 'current_category' => $category_args, 'terms' => $terms)));
    $vars['dates'] = theme('okstatefair_calendar_mobile_dates', array('data' => array('date' => $date_arg, 'current_category' => $category_args, 'title_date' => $title_date)));
  }
}

/***************************************************
 *  Custom functions
 ***************************************************/

/**
 * Custom month format.
 */
function custom_month($key) {
  $monthes = array('May' => 'May ', 'Jun' => 'June ', 'Jul' => 'July ', 'Sep' => 'Sept ');
  if (array_key_exists($key, $monthes)) return $monthes[$key];
  return $key . '. ';
}


/**
 * Add item to state_fair_calendar table.
 * @param FieldCollectionItemEntity $field_collection_item
 */
function okstatefari_calendar_event_add(FieldCollectionItemEntity $field_collection_item) {
  $date_time = !empty($field_collection_item->field_sf_event_dates_date[LANGUAGE_NONE][0]['value'])
    ? $field_collection_item->field_sf_event_dates_date[LANGUAGE_NONE][0]['value'] : NULL;
  $host_node_nid = $field_collection_item->hostEntityId();
  $host_node = $field_collection_item->hostEntity();
  if (!empty($host_node_nid) && !empty($date_time)) {
    $location = '';
    $location_tid = 0;
    if (!empty($host_node->field_sf_event_location[LANGUAGE_NONE][0]['tid'])) {
      $location_tid = $host_node->field_sf_event_location[LANGUAGE_NONE][0]['tid'];
      $term = taxonomy_term_load($location_tid);
      $location = !empty($term->name) ? $term->name : '';
    }
    $record = array(
      'id' => $field_collection_item->item_id,
      'nid' => $host_node_nid,
      'title' => $host_node->title,
      'start_date_time' => $date_time,
      'location' => $location,
      'location_tid' => $location_tid,
    );
    drupal_write_record('state_fair_calendar', $record);
  }
}

/**
 * Delete item from state_fair_calendar table.
 *
 * @param $item_id
 */
function okstatefair_calendar_event_delete($item_id) {
  db_delete('state_fair_calendar')
    ->condition('id', $item_id)
    ->execute();
}

/**
 * Return array of vocabulary term objects.
 *
 * @param $vid
 * @return array
 * Taxonomy terms
 */
function okstatefair_calendar_taxonomy_term_get_by_vid($vid) {
  $result = array();
  $query = new EntityFieldQuery();
  $query_result = $query
    ->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('vid', (int) $vid, '=')
    ->propertyOrderBy('weight')
    ->execute();

  if (isset($query_result['taxonomy_term'])) {
    $tids = array_keys($query_result['taxonomy_term']);
    $result = taxonomy_term_load_multiple($tids);
  }
  return $result;
}

/**
 * Prepare data to display statefair calendar dates.
 *
 * @param $active_dates
 * @param bool $with_dates_additional_info
 * @return array
 */
function okstatefair_calendar_get_calendar_dates_data($active_dates, $with_dates_additional_info = FALSE) {

  $date_terms = okstatefair_calendar_taxonomy_term_get_by_vid(CALENDAR_DATES_VID);
  $data = array();
  $term_edit_access = user_access('edit terms in ' . CALENDAR_DATES_VID) || user_access('administer taxonomy');
  foreach($date_terms as $date_term) {
    $date_field = $date_term->field_sf_term_date[LANGUAGE_NONE][0];
    $date_obj = new DateObject($date_field['value'], $date_field['timezone_db'], date_type_format($date_field['date_type']));

    $date_header_block = array();

    if ($with_dates_additional_info && !empty($date_term->field_event_dates_header_text[LANGUAGE_NONE]) && is_array($date_term->field_event_dates_header_text[LANGUAGE_NONE])) {
      foreach ($date_term->field_event_dates_header_text[LANGUAGE_NONE] as $field_collection_item) {
        if (!empty($field_collection_item['value'])) {
          $field_collection_item_data = field_collection_item_load($field_collection_item['value']);
          $block_item = array();
          $block_item['red'] = !empty($field_collection_item_data->field_event_dates_header_red_txt[LANGUAGE_NONE][0]['value'])
            ? check_plain($field_collection_item_data->field_event_dates_header_red_txt[LANGUAGE_NONE][0]['value']) : '';
          $block_item['black'] = !empty($field_collection_item_data->field_event_dates_head_black_txt[LANGUAGE_NONE][0]['value'])
            ? check_plain($field_collection_item_data->field_event_dates_head_black_txt[LANGUAGE_NONE][0]['value']) : '';
          $date_header_block[] = $block_item;
        }
      }
    }

    $footer_image = '';
    if($with_dates_additional_info && !empty($date_term->field_event_dates_footer_image[LANGUAGE_NONE][0])) {
      $image_vars = $date_term->field_event_dates_footer_image[LANGUAGE_NONE][0];
      $image_vars['path'] = $image_vars['uri'];
      $footer_image = theme('image', $image_vars);
    }

    $edit_link = '';
    if($term_edit_access && $with_dates_additional_info) {
      $edit_link = l(t('edit'), 'taxonomy/term/' . $date_term->tid .  '/edit', array('query' => drupal_get_destination(), 'attributes' => array('class' => array('edit-dates'))));
    }

    $item = array();
    $item['day_of_week'] = strtoupper($date_obj->format('D'));
    $item['day'] = $date_obj->format('j');
    $item['redirect_data'] = $date_obj->format(CALENDAR_DATE_FILTER_FORMAT);
    $item['active'] = !empty($active_dates) && in_array($date_obj->format('' . CALENDAR_DATE_FILTER_FORMAT . ''), $active_dates);
    $item['footer_image'] = $footer_image;
    $item['header_data'] = $date_header_block;
    $item['edit_link'] = $edit_link;
    $data[] = $item;
  }
  return $data;
}

/**
 * Return all event node dates, formatted as active dates filter strings.
 *
 * @param $nid
 * @return array
 */
function okstatefair_calendar_get_event_node_dates($nid) {

  $query = db_select('field_data_field_sf_event_dates_date', 'date')
    ->condition('fc_field.entity_type', 'node')
    ->condition('fc_field.bundle', 'state_fair_event')
    ->condition('fc_field.entity_id', $nid);

  $query->innerJoin('field_data_field_sf_event_dates', 'fc_field', 'date.entity_id = fc_field.field_sf_event_dates_value');
  $query->addField('date', 'field_sf_event_dates_date_value', 'value');
  $result = $query->execute()->fetchAll();
  
  $date_field = field_info_field('field_sf_event_dates_date');
  $result_dates = array();
  foreach ($result as $date) {
    $date_obj = new DateObject($date->value, $date_field['settings']['timezone_db'], date_type_format($date_field['type']));
    $default_timezone = new DateTimeZone(date_default_timezone());
    $date_obj->setTimezone($default_timezone);
    $date_formatted = $date_obj->format(CALENDAR_DATE_FILTER_FORMAT);
    if(!in_array($date_formatted, $result_dates)) {
      $result_dates[] = $date_formatted;
    }
  }

  return $result_dates;
}

/**
 * Return all available dates.
 */
function okstatefair_calendar_get_available_dates() {
  $date_terms = okstatefair_calendar_taxonomy_term_get_by_vid(CALENDAR_DATES_VID);
  $dates = array();
  foreach($date_terms as $date_term) {
    $date_field = $date_term->field_sf_term_date[LANGUAGE_NONE][0];
    $date_obj = new DateObject($date_field['value'], $date_field['timezone_db'], date_type_format($date_field['date_type']));
    $dates[] = $date_obj->format(CALENDAR_DATE_FILTER_FORMAT);
  }
  return $dates;
}

/**
 * Provide default date value for views contextual filter.
 */
function okstatefair_calendar_views_get_default_date() {
  $dates = okstatefair_calendar_get_available_dates();
  $cur_date = new DateObject('now', date_default_timezone(), NULL);
  $cur_date_string = $cur_date->format(CALENDAR_DATE_FILTER_FORMAT);

  if(in_array($cur_date_string, $dates)) {
    return $cur_date_string;
  } else {
    return reset($dates);
  }
};

/**
 * Provide date validation for calendar views contextual filter.
 *
 * @param $arg
 * @param $view
 * @return bool
 */
function okstatefair_calendar_views_validate($arg, $view) {
  $dates = okstatefair_calendar_get_available_dates();
  return in_array($arg, $dates);
}

/**
 * Menu ajax callback.
 */
function okstatefair_calendar_agenda_json_callback() {
  $ids = isset($_POST['ids']) && is_array($_POST['ids']) ? $_POST['ids'] : array();

  $values = !empty($ids) ? okstatefair_calendar_get_agenda_data($ids) : array();

  $result = array(
    'status' => 'ok',
    'values' => $values,
    'ids' => $ids,
  );

  drupal_json_output($result);
  drupal_exit();
}

/**
 * Provide values for agenda.
 *
 * @param $ids
 */
function okstatefair_calendar_get_agenda_data(&$ids) {

  $result = db_select('state_fair_calendar', 'c')
    ->fields('c', array('id', 'nid', 'title', 'start_date_time', 'location'))
    ->condition('c.id', $ids, 'IN')
    ->orderBy('start_date_time', 'ASC')
    ->execute()
    ->fetchAll(PDO::FETCH_ASSOC);

  $default_timezone = new DateTimeZone(date_default_timezone());
  $existing_ids = array();
  foreach ($result as $key => $value) {
    $date_time_obj = new DateObject($value['start_date_time'], 'UTC', date_type_format('datetime'));
    //$result[$key]['date_time_obj'] = $date_time_obj;
    $date_time_obj->setTimezone($default_timezone);
    $result[$key]['date_formatted'] = okstatefair_agenda_get_formated_date($date_time_obj);
    $result[$key]['time_formatted'] = $date_time_obj->format(AGENDA_TIME_FORMAT);
    $result[$key]['timestamp'] = $date_time_obj->getTimestamp();
    $result[$key]['event_url'] = url('node/' . $value['nid'], array('alias' => TRUE));
//    unset($result[$key]['location']);
    $existing_ids[] = $value['id'];
  }
  $ids = $existing_ids;
  return $result;
}

/**
 * Menu ajax callback.
 * Prepare share url for agenda social links.
 */
function okstatefair_calendar_agenda_share_url_json_callback() {
  $ids = isset($_POST['ids']) && is_array($_POST['ids']) ? $_POST['ids'] : array();
  module_load_include('inc', 'okstatefair_calendar', 'includes/okstatefair_calendar.coder');
  try {

    $link_id = okstatefair_calendar_agenda_save_shared_ids($ids);

    //encode number id to string
    $link_encoded_id = okstatefair_calendar_encode($link_id);

    $result = array(
      'status' => 'ok',
      'url' => url('events/' . $link_encoded_id, array('absolute' => TRUE)),
    );

  } catch (Exception $e) {
    $result = array(
      'status' => 'error',
    );
  }

  drupal_json_output($result);
  drupal_exit();
}

/**
 * Save shared events ids, to db, and return row id.
 *
 * @param $ids
 * @return integer
 */
function okstatefair_calendar_agenda_save_shared_ids($ids) {
  sort($ids);
  $serialized = serialize($ids);
  $hash = hash('md5', $serialized);

  $inserted_id = db_select('state_fair_agenda_links', 'l')
    ->fields('l', array('id'))
    ->condition('l.hash', $hash)
    ->execute()
    ->fetchField();

  if(empty($inserted_id)) {
    $record = array(
      'data' => $serialized,
      'hash' => $hash
    );
    drupal_write_record('state_fair_agenda_links', $record);
    $result = $record['id'];
  } else {
    $result = $inserted_id;
  }

  return $result;
}

/**
 * Shared events page, menu callback.
 */
function okstatefair_calendar_agenda_shared_events($arg) {
  module_load_include('inc', 'okstatefair_calendar', 'includes/okstatefair_calendar.coder');

  $error_message = t('This page  is outdated or does not exist.');

  $decoded_ids = okstatefair_calendar_decode($arg);

  $serialized_data = db_select('state_fair_agenda_links', 'l')
    ->fields('l', array('data'))
    ->condition('l.id', $decoded_ids)
    ->execute()
    ->fetchField();

  $is_mobile = FALSE;
  if(function_exists('mobile_tools_is_mobile_device')) {
    $device = mobile_tools_is_mobile_device();
    if(!empty($device['type']) && $device['type'] == 'mobile') {
      $is_mobile = TRUE;
    }
  }

  if(empty($serialized_data)) {
    return theme('okstatefair_calendar_shared_events', array('empty_message' => $error_message));
  }

  $ids = unserialize($serialized_data);
  if(!is_array($ids) || empty($ids)) {
    return theme('okstatefair_calendar_shared_events', array('empty_message' => $error_message));
  }

  $header = array(
    array('data' => t('DATE'), 'class' => array('first')),
    array('data' => t('TIME'), ),
    array('data' => t('EVENT'), ),

  );

  if(!$is_mobile) {
    $header[] = array('data' => t('DETAILS'), 'class' => array('last'));
  }

  $query = db_select('state_fair_calendar', 'c')
    ->fields('c', array('nid', 'title', 'start_date_time'))
  ->orderBy('start_date_time', 'ASC')
  ->condition('id', $ids, 'IN');

  $table_sort = $query->extend('TableSort'); // Add table sort extender.
    //->orderByHeader($header); // Add order by headers.


  if(!$is_mobile) {
    $pager = $table_sort->extend('PagerDefault');
    $pager->limit(20); // rows per page.
    $result = $pager->execute();
  } else {
    $result = $table_sort->execute();
  }



  if(empty($result)) {
    return theme('okstatefair_calendar_shared_events', array('empty_message' => $error_message));
  }

  $rows = array();
  $date_field = field_info_field('field_sf_event_dates_date');
  foreach($result as $res){
      $date_obj = new DateObject($res->start_date_time, $date_field['settings']['timezone_db'], date_type_format($date_field['type']));
      $default_timezone = new DateTimeZone(date_default_timezone());
      $date_obj->setTimezone($default_timezone);
      $date_formatted = $date_obj->format(CALENDAR_SHARED_EVENTS_DATE_FORMAT);
      $time_formatted = $date_obj->format(CALENDAR_SHARED_EVENTS_TIME_FORMAT);
    $new_row = array(
      $date_formatted,
      $time_formatted,
      l($res->title, 'node/' . $res->nid),
    );

    if(!$is_mobile) {
      $new_row[] = l(t('detail'), 'node/' . $res->nid, array('attributes' => array('title'=> t('Details'), 'class' => array('btn-details'))));
    }

    $rows[] = $new_row;
  }

  $table = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => 'sort-table', 'class' => array('table', 'table-event', 'table-event-custom'))));
  $pager = theme('pager');

  $output = theme('okstatefair_calendar_shared_events', array('table' => $table, 'pager' => $pager));

  return $output;
}

/**
 * Help theme function for mobile calendar dates.
 */
function theme_okstatefair_calendar_mobile_date_link($vars) {
  $current = $vars['current_date'];
  $active = $vars['active_date'];
  $category  = $vars['category'];

  $attributes = array('class' => array('date-calendar'));
  if ($current == $active) {
    $attributes['class'][] = 'active';
  }
  $current_split = explode('-', $current);
  $day = end($current_split);
  $output = '<a href="' . url('mobile-state-fair-calendar/' . $current . '/' . $category) . '" ' . drupal_attributes($attributes) . '><span>'. $day . '</span></a>';
  return $output;
}

/**
 * Ajax page callback.
 */
function okstatefair_calendar_get_ajax_print_version() {

  $args = arg();
  unset($args[0]);

  $args = array_merge(array('state_fair_calendar', 'print_display'), $args);

  print call_user_func_array('views_embed_view', $args);
  drupal_exit();
}

/**********************************************************************
 * SFP Calendar theme helpers
 **********************************************************************/


/**
 * Check nearest dates in list. if they from the same event, merge Events in one row and format output.
 */
function okstatefair_calendar_group_nearest_events(&$vars, $field_name, $show_year = FALSE, $full_month = FALSE) {

  if (isset($vars['view']->result) && count($vars['view']->result) >= 1) {

    $results = $vars['view']->result;
    //Create date objects, add event data to event range
    foreach ($results as $key => $item) {
      $results[$key]->date_obj = okstatefair_calender_date_field_to_object($item->{'field_' . $field_name}[0]['raw']);
      $results[$key]->date_obj->setTime(0, 0, 0);
      $results[$key]->dates_range[] = $results[$key]->date_obj;
    }

    //Convolution of array by node date range. $results will have rows grouped by date range.
    foreach ($results as $key => $item) {
      foreach ($results as $key2 => $item2) {
        if ($key2 > $key && !empty($item2) && $item->nid == $item2->nid) {

          foreach ($item->dates_range as $date_from_range) {
            $dates_dif = $date_from_range->diff($item2->date_obj);
            if($dates_dif->days <= 1) {
              $results[$key]->dates_range[] = $item2->date_obj;
              unset($results[$key2]);
              break;//end foreach
            }
          }
        }
      }
    }

    //change dates output, remove rows from the same range, leave only row from each range
    foreach ($vars['rows'] as $key => $row) {
      if(!isset($results[$key])) {
        unset($vars['rows'][$key]);
      } else {
        $vars['rows'][$key][$field_name] = okstatefair_calendar_date_range_format($results[$key]->dates_range, $show_year, $full_month);
      }
    }
  }
}

function okstatefair_calender_date_field_to_object($value, $key = 'value') {
  $timezone = new DateTimeZone($value['timezone_db']);
  $date = new DateTime($value[$key], $timezone);
  $date->setTimezone(date_default_timezone_object());

  return $date;
}

function okstatefair_calendar_date_range_format($dates_range, $show_year = FALSE, $full_month = FALSE) {
  $output = '';

  sort($dates_range);

  $min = reset($dates_range);
  $max = end($dates_range);

  $output .= $full_month ? $min->format('F d') : $min->format('M. d');

  if($min !== $max) {

    if($show_year && ($min->format('Y') != $max->format('Y'))) {
      $output .= $min->format(', Y');
    }

    if(($min->format('M') != $max->format('M'))) {
      $output .= '-' . ($full_month ? $max->format('F') : custom_month($max->format('M'))) . $max->format(' d');
    } else {
      $output .= $max->format('-d');
    }
  }

  if($show_year) {
    $output .= $min->format(', Y');
  }

  return $output;
}

function okstatefair_calendar_views_pre_build(&$view) {
    switch($view->name) {
      case 'sfp_calendar_list':
        //if at leas one argument exist, remove default filter.
        $arg = arg(1);
        if(!empty($arg) || !empty($_GET['chosen'])) {
          if (!empty($view->filter['field_sfp_event_dates_date_value'])) {
            unset($view->filter['field_sfp_event_dates_date_value']);
          }
          if (!empty($view->filter['field_sfp_event_dates_date_value_1'])) {
            unset($view->filter['field_sfp_event_dates_date_value_1']);
          }
        }

        break;
    }
}

function okstatefair_calendar_views_pre_render(&$view) {
  switch($view->name) {
    case 'sfp_calendar_list':

      if (!empty($view->args[2])
        && strtolower($view->args[2]) !== 'all'
      ) {

        $view->current_date = DateTime::createFromFormat('!Y-m-d', $view->args[2]);
      }
      else if (!empty($view->args[0])
        && strtolower($view->args[0]) !== 'all'
      ) {

        $view->current_date = DateTime::createFromFormat('!Y-m', $view->args[0]);

      }
      else {
        $view->current_date = new DateTime();
      }

      break;
  }
}

function okstatefair_calendar_views_query_alter (&$view, &$query) {
  if ($view->name == 'state_fair_calendar' && $view->current_display == 'page') {
    if (isset($_GET["order"]) && (($_GET["order"] == 'name') || ($_GET["order"] == 'title'))) {
      $orderby_time = array(
        'field' => 'field_collection_item_field_data_field_sf_event_dates__field_data_field_sf_event_dates_date.field_sf_event_dates_date_value',
        'direction' => 'ASC',
      );
      $query->orderby[] = $orderby_time;
    }
  }

}
